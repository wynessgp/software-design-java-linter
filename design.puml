@startuml
package presentation {
    +class Main {
        +{static} main(args: String[]): void
    }
    +class UI {
        +show()
        +displayResults()
        +displayPreferencePicker()
        +displayInputUI()
        +handleUserPreferences()
        +handleLinterInputs()
    }
    Main .l.> UI
}
package domain {
    ' +abstract class ClassNode {
    '     -access: int
    '     -fields: List<FieldNode>
    '     -innerClasses: Map<String, int>
    '     -interfaces: List<String>
    '     -name: String
    '     -superName: String
    ' }
    ' +abstract class FieldNode {
    '     -access: int
    '     -desc: String
    '     -name: String
    '     -value: Object
    ' }
    ' +abstract class MethodNode {
    '     -access: int
    '     -desc: String
    '     -exceptions: List<String>
    '     -name: String
    '     -params: Map<String, List<String>>
    ' }
    ' +abstract class InnerClassNode {

    ' }
    +abstract class CheckStrategy {
        #parsers: List<ParseOption>
        +{abstract} performCheck(classes: List<String>)
        +{abstract} handleResults(preferences: Properties)
    }
    +interface ParseOption {
        +parse(thingsToParse: List<String>)
    }
    +class ParseFields {
        +parse()
    }
    +class ParseMethods {
        +parse()
        -parseInstructionsForMethod()
    }
    +class ParseClasses {
        +parse()
    }
    
    ParseFields .u.|> ParseOption
    ParseClasses .u.|> ParseOption
    ParseMethods .u.|> ParseOption
    CheckStrategy -r-> "*" ParseOption

    +class StaticMethodCheck {
        +performCheck(classes: List<String>)
        +handleResults(preferences: Properties)
    }
    +class FormattingCheck {
        +performCheck(classes: List<String>)
        +handleResults(preferences: Properties)
    }
    +class UnusedItemsCheck {
        +performCheck(classes: List<String>)
        +handleResults(preferences: Properties)
    }
    +class InformationHidingCheck {
        +performCheck(classes: List<String>)
        +handleResults(preferences: Properties)
    }
    +class ThreeLayerCheck {
        +performCheck(classes: List<String>)
        +handleResults(preferences: Properties)
    }
    +class HollywoodCheck {
        +performCheck(classes: List<String>)
        +handleResults(preferences: Properties)
    }
    +class FacadeCheck {
        +performCheck(classes: List<String>)
        +handleResults(preferences: Properties)
    }
    +class StrategyCheck {
        +performCheck(classes: List<String>)
        +handleResults(preferences: Properties)
    }
    +class DecoratorCheck {
        +performCheck(classes: List<String>)
        +handleResults(preferences: Properties)
    }
    InformationHidingCheck -u-|> CheckStrategy
    ThreeLayerCheck -u-|> CheckStrategy
    HollywoodCheck -u-|> CheckStrategy
    UnusedItemsCheck -u-|> CheckStrategy
    FormattingCheck -u-|> CheckStrategy
    StaticMethodCheck -u-|> CheckStrategy
    FacadeCheck -u-|> CheckStrategy
    StrategyCheck -u-|> CheckStrategy
    DecoratorCheck -u-|> CheckStrategy

}
package datasource {
    +interface StandardOutput {
        +write(): void
    }
    +class ConsoleOutput {
        -outStream: FileOutputStream
        +ConsoleOutput(fs: FileOutputStream)
        {method} // interface methods...
    }
    +class FileOutput {
        -filepath: String
        -bufferedWriter: BufferedWriter
        +ConsoleOutput(fp: String)
        {method} // interface methods...
    }
    +interface StandardInput {
        +nextLine(): String
        +hasNext(): boolean
        +nextInt(): int
        +next(): String
    }
    +class ConsoleInput {
        -scan: Scanner
        -fileStream: FileInputStream
        +ConsoleInput(fs: FileInputStream)
        {method} // interface methods...
    }
    ConsoleInput .u.|> StandardInput
    ConsoleOutput .u.|> StandardOutput
    FileOutput .u.|> StandardOutput
}
@enduml